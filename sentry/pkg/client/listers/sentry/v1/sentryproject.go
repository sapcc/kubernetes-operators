/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/sapcc/kubernetes-operators/sentry/pkg/apis/sentry/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SentryProjectLister helps list SentryProjects.
// All objects returned here must be treated as read-only.
type SentryProjectLister interface {
	// List lists all SentryProjects in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.SentryProject, err error)
	// SentryProjects returns an object that can list and get SentryProjects.
	SentryProjects(namespace string) SentryProjectNamespaceLister
	SentryProjectListerExpansion
}

// sentryProjectLister implements the SentryProjectLister interface.
type sentryProjectLister struct {
	indexer cache.Indexer
}

// NewSentryProjectLister returns a new SentryProjectLister.
func NewSentryProjectLister(indexer cache.Indexer) SentryProjectLister {
	return &sentryProjectLister{indexer: indexer}
}

// List lists all SentryProjects in the indexer.
func (s *sentryProjectLister) List(selector labels.Selector) (ret []*v1.SentryProject, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.SentryProject))
	})
	return ret, err
}

// SentryProjects returns an object that can list and get SentryProjects.
func (s *sentryProjectLister) SentryProjects(namespace string) SentryProjectNamespaceLister {
	return sentryProjectNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SentryProjectNamespaceLister helps list and get SentryProjects.
// All objects returned here must be treated as read-only.
type SentryProjectNamespaceLister interface {
	// List lists all SentryProjects in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.SentryProject, err error)
	// Get retrieves the SentryProject from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.SentryProject, error)
	SentryProjectNamespaceListerExpansion
}

// sentryProjectNamespaceLister implements the SentryProjectNamespaceLister
// interface.
type sentryProjectNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SentryProjects in the indexer for a given namespace.
func (s sentryProjectNamespaceLister) List(selector labels.Selector) (ret []*v1.SentryProject, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.SentryProject))
	})
	return ret, err
}

// Get retrieves the SentryProject from the indexer for a given namespace and name.
func (s sentryProjectNamespaceLister) Get(name string) (*v1.SentryProject, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("sentryproject"), name)
	}
	return obj.(*v1.SentryProject), nil
}
